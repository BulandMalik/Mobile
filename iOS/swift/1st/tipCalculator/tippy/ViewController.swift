//
//  ViewController.swift
//  tippy
//
//  Created by Malik, Buland on 3/10/17.
//  Copyright Â© 2017 Malik, Buland. All rights reserved.
//

import UIKit

class ViewController: UIViewController {

    @IBOutlet weak var tipLabel: UILabel!
    
    @IBOutlet weak var billField: UITextField!
    
    @IBOutlet weak var totalLabel: UILabel!
    
    @IBOutlet weak var tipControl: UISegmentedControl!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    /**
        When the view controller is initially set up, viewDidLoad is called. As it is shown
        viewWillAppear and viewDidAppear are called.
    */
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        print("view will appear")
    }
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        print("view did appear");
        
        // Do any additional setup after loading the view.
        let defaults = UserDefaults.standard;
        
        print("Default Percentage Index in Main View : ",defaults.integer(forKey: Constants.DEFAULT_TIPCALC_SELECTED_PERCENTAGE));
        
        tipControl.selectedSegmentIndex = defaults.integer(forKey: Constants.DEFAULT_TIPCALC_SELECTED_PERCENTAGE);
        
        // Setting the currencySymbol based on the locale
        let locale = Locale.current;
        let currencySymbol = locale.currencySymbol;
        let currencyCode = locale.currencyCode;
        
        print("currencySymbol:"+currencySymbol!);
        print("currencyCode:"+currencyCode!);
        
        //sets the currency for use for later
        defaults.set(currencySymbol, forKey: Constants.CURRENCY_SYMBOL);
        
        //set last used Bill Amount
        billField.text = defaults.string(forKey: Constants.LAST_BILL_AMOUNT);
        print("last bill amount:"+defaults.string(forKey: Constants.LAST_BILL_AMOUNT)!);
        
        //calling the functiona manually
        //TODO:: it should be called automatically as there is an outlet action, will check later
        calculateTipOnBillChange(tipControl);
        
        /**
         Make sure the keyboard is always visible and the bill amount is always the first responder. This way the user doesn't have to tap anywhere to use this app.
         Just launch the app and start typing.
        */
        self.billField.becomeFirstResponder();
        
    }
    
    /**
     When the view is hidden viewWillDisappear and viewDidDisappear are called. The lifecycle methods 
     are split into two methods (i.e. viewWillAppear and viewDidAppear) because sometimes you want 
     some behavior to happen before the transition animation starts or after the transition animation
     ends.
    */
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        print("view will disappear");
                
    }
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        print("view did disappear")
    }

    /*
     name of the fucntiona that gets called whenever
     user taps on the tap gesture recongizer which in
     this case is on the main view
     */
    @IBAction func onTap(_ sender: Any) {
        //print("Hello");
        
        //dismiss the keyboard
        view.endEditing(true);
    }
    
    /**
     this function gets called when there is any change in the
     bill amount or top control
     
     If you change the _sender to AnyObject as opposed to Any, it will
     allow you to connect multiple sources to the same action/fucntion (as in our
     case we want events generated by both test feild & top control to be
     connected to this action/function). Apparently, it's a bug in Xcode 8.2.1.
     */
    //@IBAction func calculateTipOnBillChange(_ sender: Any) {
    @IBAction func calculateTipOnBillChange(_ sender: AnyObject) {

        let defaults = UserDefaults.standard;
        
        let tipPercentages = [0.10 , 0.15, 0.2];
        
        //if user types invalid number like alphabets etc. than return 0
        //so it says if value after converting to Double is Nil than retunr 0
        let bill = Double(billField.text!) ?? 0;
        let tip = bill * tipPercentages[tipControl.selectedSegmentIndex];
        let total = bill + tip;
        
        //tipLabel.text = "$\(tip)";
        let currencySymbol = defaults.string(forKey: Constants.CURRENCY_SYMBOL);
        
        tipLabel.text = String(format: currencySymbol!+"%.2f", tip);
        totalLabel.text = String(format: currencySymbol!+"%.2f", total);
        
        
        defaults.set(bill, forKey: Constants.LAST_BILL_AMOUNT);
        defaults.synchronize();
    }
}

